#include <iostream>
#include<bits/stdc++.h>
using namespace std;

void printBFS(int** edge,int vertices,int st)
{
    int* visited1=new int[vertices];
    for(int i=0;i<vertices;i++)
    {
        visited1[i]=false;
    }
    std::queue<int> q;
    q.push(st);
    visited1[st]=true;
    while(!q.empty())
    {
        int k=q.front();
        cout<<k<<endl;
        q.pop();
        for(int i=0;i<vertices;i++)
        {
            if(edge[k][i]!=0&&visited1[i]==false)
            {
                q.push(i);
                visited1[i]=true;
            }
        }
    }
}


void printDFS(int** edge,int vertices,int st,bool* visited)
{
    cout<<st<<endl;
    visited[st]=true;
    for(int i=0;i<vertices;i++)
    {
        if(i==st)
        {
            continue;
        }
        if(edge[st][i]!=0)
        {
            if(visited[i]==false){
            printDFS(edge,vertices,i,visited);}
        }
    }
}


int main() {
	int n;
	int e;
	cin>>n>>e;
	int** edge=new int*[n];
	for(int i=0;i<n;i++)
	{
	    edge[i]=new int[n];
	    for(int j=0;j<n;j++)
	    {
	        edge[i][j]=0;
	    }
	}
	for(int i=0;i<e;i++)
	{
	    int s,e;
	    cin>>s>>e;
	    edge[s][e]=1;
	    edge[e][s]=1;
	}
	int st=0;
	bool* visited=new bool[n];
	for(int i=0;i<n;i++)
	{
	    visited[i]=false;
	}
	printDFS(edge,n,st,visited);
	printBFS(edge,n,st);
	return 0;
}